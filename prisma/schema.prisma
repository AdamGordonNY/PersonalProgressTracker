generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String              @id
  name             String?
  email            String?             @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  cloudTokens      Json? // Encrypted tokens for cloud services
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  coins            Int                 @default(0)
  habits           Habit[]
  rewards          Reward[]
  golfRounds       GolfRound[]
  practiceLog      PracticeLog[]
  musicSkills      MusicSkill[]
  musicGoals       MusicGoal[]
  recordings       Recording[]
  cards            Card[]
  keywords         Keyword[]
  attachments      Attachment[]
  factSources      FactSource[]
  feeds            Feed[]
  columns          Column[]
  UserGoogleToken  UserGoogleToken[]
  boards           Board[]
  microsoftToken   UserMicrosoftToken?
  microsoftTokenId String?             @unique

  Questionnaire Questionnaire[]

  Response Response[]
}

model Column {
  id        String   @id @default(cuid())
  title     String
  order     Int
  userId    String
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Card {
  id          String       @id @default(cuid())
  title       String
  description String?
  columnId    String
  column      Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  keywords    Keyword[]
  attachments Attachment[]
  factSources FactSource[]
  order       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([columnId])
  @@index([userId])
}

model UserGoogleToken {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model UserMicrosoftToken {
  id           String   @id @default(cuid())
  userId       String   @unique
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Feed {
  id          String   @id @default(cuid())
  url         String   @unique
  title       String?
  lastChecked DateTime @default(now())
  lastHash    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries     Entry[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Entry {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  url       String
  feedId    String
  feed      Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade)
  published DateTime
  createdAt DateTime @default(now())
  guid      String?  @unique // Add this for duplicate prevention

  @@index([feedId])
}

model Keyword {
  id     String @id @default(cuid())
  name   String
  userId String
  cardId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  fileType  String
  provider  String
  cardId    String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

model FactSource {
  id         String  @id @default(cuid())
  title      String
  url        String?
  quote      String?
  screenshot String?
  cardId     String
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  card       Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

model Habit {
  id          String       @id @default(cuid())
  name        String
  description String?
  priority    Priority     @default(OPTIONAL)
  coins       Int          @default(10)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  location    String?
  timeOfDay   DateTime?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions Completion[]
}

model Completion {
  id      String   @id @default(cuid())
  habitId String
  date    DateTime @default(now())
  habit   Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

model Reward {
  id          String   @id @default(cuid())
  name        String
  description String?
  cost        Int
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Golf tracking models
model GolfRound {
  id          String      @id @default(cuid())
  userId      String
  courseName  String
  date        DateTime
  totalScore  Int
  totalPutts  Int
  fairwaysHit Int
  greensInReg Int
  weather     Json? // Store weather data as JSON
  courseId    String?
  course      GolfCourse? @relation(fields: [courseId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  holes       GolfHole[]
  shots       GolfShot[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([courseId])
}

model GolfHole {
  id         String     @id @default(cuid())
  roundId    String
  holeNumber Int
  par        Int
  strokes    Int
  putts      Int
  fairwayHit Boolean
  round      GolfRound  @relation(fields: [roundId], references: [id], onDelete: Cascade)
  shots      GolfShot[]

  @@unique([roundId, holeNumber])
  @@index([roundId])
}

model GolfShot {
  id            String    @id @default(cuid())
  roundId       String
  holeId        String
  club          ClubType
  shotType      ShotType
  distance      Int // Yards
  result        String? // "Fairway", "Rough", "Green", etc.
  elevation     Int? // Feet above/below target
  windSpeed     Int? // MPH
  windDirection String? // N, NE, E, etc.
  latitude      Float? // For shot mapping
  longitude     Float? // For shot mapping
  note          String?
  round         GolfRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
  hole          GolfHole  @relation(fields: [holeId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())

  @@index([roundId])
  @@index([holeId])
}

model GolfCourse {
  id        String             @id @default(cuid())
  name      String
  location  String
  latitude  Float
  longitude Float
  holes     GolfHoleTemplate[]
  rounds    GolfRound[]
  createdAt DateTime           @default(now())
}

model GolfHoleTemplate {
  id         String     @id @default(cuid())
  courseId   String
  holeNumber Int
  par        Int
  yards      Int
  handicap   Int
  course     GolfCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, holeNumber])
  @@index([courseId])
}

enum ClubType {
  DRIVER
  THREE_WOOD
  FOUR_HYBRID
  FIVE_HYBRID
  TWO_IRON
  THREE_IRON
  FOUR_IRON
  FIVE_IRON
  SIX_IRON
  SEVEN_IRON
  EIGHT_IRON
  NINE_IRON
  PITCHING_WEDGE
  GAP_WEDGE
  SAND_WEDGE
  LOB_WEDGE
  PUTTER
}

enum ShotType {
  DRIVE
  FAIRWAY
  APPROACH
  CHIP
  PITCH
  BUNKER
  PUTT
  RECOVERY
}

model PracticeLog {
  id       String   @id @default(cuid())
  userId   String
  duration Int // Duration in minutes
  date     DateTime @default(now())
  notes    String?
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MusicSkill {
  id        String      @id @default(cuid())
  userId    String
  name      String
  type      SkillType
  status    SkillStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MusicGoal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  dueDate     DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recording {
  id        String   @id @default(cuid())
  userId    String
  title     String
  url       String
  duration  Int // Duration in seconds
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id            String          @id @default(cuid())
  title         String
  description   String?
  color         String?
  order         Int
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns       Column[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Questionnaire Questionnaire[]

  @@index([userId])
}

model Questionnaire {
  id          String        @id @default(cuid())
  title       String
  description String?
  frequency   FrequencyType @default(ONCE)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  questions   Question[]
  responses   Response[]
  boardId     String?
  board       Board?        @relation(fields: [boardId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
}

model Question {
  id              String        @id @default(cuid())
  text            String
  type            QuestionType  @default(TEXT)
  options         String[]
  order           Int
  required        Boolean       @default(false)
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
}

model Response {
  id              String        @id @default(cuid())
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  answers         Json // Array of {questionId, value}
  createdAt       DateTime      @default(now())

  @@index([userId, questionnaireId])
}

enum FrequencyType {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CHECKBOX
  RATING
  DATE
  SLIDER
}

enum Priority {
  CRITICAL
  IMPORTANT
  OPTIONAL
}

enum SkillType {
  CHORD
  SCALE
  TECHNIQUE
}

enum SkillStatus {
  TO_LEARN
  IN_PROGRESS
  MASTERED
}
